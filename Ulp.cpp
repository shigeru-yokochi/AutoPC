// Ulp.cpp : implementation file
//
#include "stdafx.h"
#include "resource.h"
#include "Ulp.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif
/*************************************************************************************************
*	ｺﾝｽﾄﾗｸﾀ
**************************************************************************************************/
CUlp::CUlp(CWnd *pWnd,int nIndex/*=0*/)
{
	CStatic::Create(L"",NULL,CRect(0,0,0,0),pWnd);	//dummy
	m_pWnd = pWnd;
	m_nIndex = nIndex;
	m_pSoc = new CCeTCPSoc(this,nIndex);

}
/*************************************************************************************************
*	ﾃﾞｽﾄﾗｸﾀ
**************************************************************************************************/
CUlp::~CUlp()
{
	delete m_pSoc;
}
/*************************************************************************************************
*	ﾒｯｾｰｼﾞﾏｯﾌﾟ
**************************************************************************************************/
BEGIN_MESSAGE_MAP(CUlp, CStatic)
	ON_MESSAGE(WM_EVENT, CUlp::OnEvent)
	//{{AFX_MSG_MAP(CUlp)
	ON_WM_TIMER()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()
/*************************************************************************************************
*	ﾀｲﾑｱｳﾄ
**************************************************************************************************/
void CUlp::OnTimer(UINT nIDEvent) 
{
	KillTimer(1);
	PostMessage(WM_EVENT,EV_SOC_CLOSE,m_nIndex);	//ソケット切断要求

	CStatic::OnTimer(nIDEvent);
}
/****************************************************************************
*  イベント通知
*  wParam:DLGｲﾝﾃﾞｯｸｽ
*  lParam:いろいろ
*****************************************************************************/
LONG CUlp::OnEvent(UINT wParam, LONG lParam)
{
	switch(wParam){
		case EV_SOC_RECEIVE_NOTIF:			//ソケット受信
			KillTimer(1);
			m_pWnd->PostMessage(WM_EVENT,EV_SOC_RECEIVE_NOTIF,m_nIndex);
			SetTimer(1,1000,NULL);		//1秒後に切断
			break;
		case EV_SOC_CLOSE:				//ソケット切断要求
			m_pWnd->PostMessage(WM_EVENT,EV_SOC_CLOSE,m_nIndex);
			break;
	}

	return 0L;
}
/*************************************************************************************************
*	作成
**************************************************************************************************/
BOOL CUlp::Create(int nPort)
{
	return m_pSoc->Create(nPort);
}
/*************************************************************************************************
*	接続
**************************************************************************************************/
BOOL CUlp::Connect(CString strAdr,int nPort)
{
	return m_pSoc->Connect(strAdr,nPort);
}
/*************************************************************************************************
*	送信
**************************************************************************************************/
void CUlp::Send(char *buf,int nLen,BOOL bClose/*=FALSE*/)
{
	m_pSoc->Send(buf,nLen);
	if(bClose == TRUE)	SetTimer(1,1000,NULL);		//1秒後に切断
	else				SetTimer(1,30000,NULL);		//受信がまったく無い場合に切断する時間
}
/*************************************************************************************************
*	受信
**************************************************************************************************/
int CUlp::Receive(char* buf,int nLen)
{
	return m_pSoc->Receive(buf,nLen);
}
/*************************************************************************************************
*	切断
**************************************************************************************************/
void CUlp::Close()
{
	m_pSoc->Close();
}
